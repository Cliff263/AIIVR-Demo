// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  AGENT
  SUPERVISOR
}

enum CallType {
  INBOUND
  OUTBOUND
  MISSED
}

enum CallStatus {
  QUEUED
  IN_PROGRESS
  COMPLETED
  FAILED
  TRANSFERRED
}

enum CallOutcome {
  SUCCESSFUL
  UNSUCCESSFUL
  CALLBACK_REQUESTED
  TRANSFERRED
  VOICEMAIL
}

enum AgentStatus {
  ONLINE
  OFFLINE
  PAUSED
}

enum PauseReason {
  LUNCH
  BATHROOM
  SMOKE
  ON_LEAVE
  CASE_WORK
  TRAINING
  MEETING
  SYSTEM_ISSUE
}

enum QueryStatus {
  OPEN
  IN_PROGRESS
  PENDING
  RESOLVED
  CLOSED
}

enum QueryPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum RecordingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  passwordHash  String
  name          String
  role          UserRole  @default(AGENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  sessions      Session[]
  calls         Call[]    @relation("AgentCalls")
  recordings    Recording[]
  status        AgentStatusInfo?
  queries       Query[]   @relation("AssignedQueries")
  supervisedBy  User?     @relation("SupervisorAgent", fields: [supervisorId], references: [id])
  supervisorId  Int?
  agents        User[]    @relation("SupervisorAgent")
  performance   PerformanceMetrics[]
  statusHistory AgentStatusHistory[]
  qualityEvaluations CallQuality[] @relation("QualityEvaluator")
}

model Session {
  id        String   @id
  userId    Int
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Call {
  id          Int         @id @default(autoincrement())
  type        CallType
  status      CallStatus  @default(QUEUED)
  outcome     CallOutcome?
  timestamp   DateTime    @default(now())
  duration    Int         // Duration in seconds
  phoneNumber String
  contact     String?
  notes       String?
  tags        String[]
  agentId     Int
  agent       User        @relation("AgentCalls", fields: [agentId], references: [id])
  recording   Recording?
  quality     CallQuality?
  queries     Query[]     @relation("QueryCalls")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Recording {
  id            Int             @id @default(autoincrement())
  url           String          @unique
  duration      Int             // Duration in seconds
  format        String          // e.g., "mp3", "wav"
  storagePath   String          // Path in storage bucket
  status        RecordingStatus @default(PENDING)
  transcription String?         // Transcribed text
  callId        Int             @unique
  call          Call            @relation(fields: [callId], references: [id])
  uploadedBy    Int
  uploader      User            @relation(fields: [uploadedBy], references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model AgentStatusInfo {
  id          Int         @id @default(autoincrement())
  userId      Int         @unique
  user        User        @relation(fields: [userId], references: [id])
  status      AgentStatus @default(OFFLINE)
  pauseReason PauseReason?
  lastActive  DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model AgentStatusHistory {
  id          Int         @id @default(autoincrement())
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  status      AgentStatus
  pauseReason PauseReason?
  timestamp   DateTime    @default(now())
}

model Query {
  id            Int           @id @default(autoincrement())
  title         String
  description   String
  status        QueryStatus   @default(OPEN)
  priority      QueryPriority @default(MEDIUM)
  category      String?
  dueDate       DateTime?
  resolution    String?
  assignedTo    Int
  assignee      User          @relation("AssignedQueries", fields: [assignedTo], references: [id])
  relatedCalls  Call[]        @relation("QueryCalls")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model CallQuality {
  id          Int      @id @default(autoincrement())
  callId      Int      @unique
  call        Call     @relation(fields: [callId], references: [id])
  score       Int      // 1-5 rating
  notes       String?
  evaluatedBy Int
  evaluator   User     @relation("QualityEvaluator", fields: [evaluatedBy], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PerformanceMetrics {
  id            Int      @id @default(autoincrement())
  userId        Int
  user          User     @relation(fields: [userId], references: [id])
  date          DateTime @default(now())
  callsHandled  Int      @default(0)
  avgCallTime   Int      // Average call duration in seconds
  satisfaction  Float    // Customer satisfaction score
  resolution    Float    // First call resolution rate
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}