// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  AGENT
  SUPERVISOR
}

enum CallType {
  INBOUND
  OUTBOUND
  MISSED
}

enum AgentStatus {
  ONLINE
  OFFLINE
  PAUSED
}

enum PauseReason {
  LUNCH
  BATHROOM
  SMOKE
  ON_LEAVE
  CASE_WORK
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  passwordHash  String
  name          String
  role          UserRole  @default(AGENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  sessions      Session[]
  calls         Call[]    @relation("AgentCalls")
  recordings    Recording[]
  status        AgentStatusInfo?
  queries       Query[]   @relation("AssignedQueries")
  supervisedBy  User?     @relation("SupervisorAgent", fields: [supervisorId], references: [id])
  supervisorId  Int?
  agents        User[]    @relation("SupervisorAgent")
}

model Session {
  id        String   @id
  userId    Int
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Call {
  id          Int       @id @default(autoincrement())
  type        CallType
  timestamp   DateTime  @default(now())
  duration    Int       // Duration in seconds
  phoneNumber String
  contact     String?
  agentId     Int
  agent       User      @relation("AgentCalls", fields: [agentId], references: [id])
  recording   Recording?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Recording {
  id          Int       @id @default(autoincrement())
  url         String    @unique
  duration    Int       // Duration in seconds
  callId      Int       @unique
  call        Call      @relation(fields: [callId], references: [id])
  uploadedBy  Int
  uploader    User      @relation(fields: [uploadedBy], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model AgentStatusInfo {
  id          Int         @id @default(autoincrement())
  userId      Int         @unique
  user        User        @relation(fields: [userId], references: [id])
  status      AgentStatus @default(OFFLINE)
  pauseReason PauseReason?
  lastActive  DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Query {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  status      String    // open, in-progress, resolved
  priority    String    // low, medium, high
  assignedTo  Int
  assignee    User      @relation("AssignedQueries", fields: [assignedTo], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}